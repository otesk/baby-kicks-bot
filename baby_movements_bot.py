#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Baby Movements Telegram Bot —Å –≥–∏–±–∫–∏–º —Ç–∞–π–º–µ—Ä–æ–º
--------------------------------------------------------
–§—É–Ω–∫—Ü–∏–∏:
- üë£ –ó–∞–ø–∏—Å—å –¥–≤–∏–∂–µ–Ω–∏—è –¥–æ 10 –∑–∞ –¥–µ–Ω—å
- –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è üü¢/üî¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º–µ—Ä–∞
- ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–∂–∞—Ç–∏–µ
- üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä
- ‚è± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ SQLite)
- üìñ –î–Ω–µ–≤–Ω–∏–∫ –ø–æ –¥–Ω—è–º
- üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV
- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é

–ó–∞–ø—É—Å–∫: python baby_movements_bot.py
"""

import os
import sqlite3
import csv
from datetime import datetime, timedelta, date
from typing import Optional, Tuple, List

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile

BOT_TOKEN = os.getenv("BOT_TOKEN", "PASTE_YOUR_BOT_TOKEN_HERE")
DB_PATH = os.getenv("DB_PATH", "movements.db")
GOAL_PER_DAY = 10
DEFAULT_COOLDOWN_SECONDS = 10*60

if BOT_TOKEN == "PASTE_YOUR_BOT_TOKEN_HERE":
    print("[–í–ù–ò–ú–ê–ù–ò–ï] –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ BOT_TOKEN –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

force_green_flag = {}
user_manual_timer_input = set()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ====

def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS movements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                ts INTEGER NOT NULL
            );
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id INTEGER PRIMARY KEY,
                cooldown_seconds INTEGER NOT NULL
            );
        """)
        conn.commit()

# ==== –¢–∞–π–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ====

def get_user_cooldown(user_id: int) -> int:
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT cooldown_seconds FROM user_settings WHERE user_id=?", (user_id,))
        row = cur.fetchone()
        if row:
            return row[0]
        else:
            cur.execute("INSERT OR IGNORE INTO user_settings(user_id, cooldown_seconds) VALUES(?, ?)"
                        , (user_id, DEFAULT_COOLDOWN_SECONDS))
            conn.commit()
            return DEFAULT_COOLDOWN_SECONDS


def set_user_cooldown(user_id: int, seconds: int):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT OR REPLACE INTO user_settings(user_id, cooldown_seconds) VALUES(?, ?)"
                    , (user_id, seconds))
        conn.commit()

# ==== –î–≤–∏–∂–µ–Ω–∏—è ====

def now_local():
    return datetime.now()

def to_epoch(dt: datetime) -> int:
    return int(dt.timestamp())

def from_epoch(ts: int) -> datetime:
    return datetime.fromtimestamp(ts)


def insert_movement(user_id: int, ts: Optional[int] = None):
    if ts is None:
        ts = to_epoch(now_local())
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO movements (user_id, ts) VALUES (?, ?)" , (user_id, ts))
        conn.commit()


def delete_last_movement(user_id: int) -> Optional[int]:
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, ts FROM movements WHERE user_id = ? ORDER BY ts DESC LIMIT 1", (user_id,))
        row = cur.fetchone()
        if not row:
            return None
        rec_id, ts = row
        cur.execute("DELETE FROM movements WHERE id = ?", (rec_id,))
        conn.commit()
        return ts


def fetch_last_movement(user_id: int) -> Optional[int]:
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT ts FROM movements WHERE user_id = ? ORDER BY ts DESC LIMIT 1", (user_id,))
        row = cur.fetchone()
        return row[0] if row else None


def fetch_day_movements(user_id: int, for_date: Optional[date] = None) -> List[int]:
    if for_date is None:
        for_date = now_local().date()
    start = datetime.combine(for_date, datetime.min.time())
    end = start + timedelta(days=1)
    start_ts = to_epoch(start)
    end_ts = to_epoch(end)
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT ts FROM movements WHERE user_id=? AND ts >= ? AND ts < ? ORDER BY ts ASC", (user_id, start_ts, end_ts))
        return [r[0] for r in cur.fetchall()]

# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ====

def is_press_allowed(user_id: int) -> Tuple[bool, Optional[int]]:
    if force_green_flag.get(user_id):
        return True, None
    last = fetch_last_movement(user_id)
    if last is None:
        return True, None
    delta = to_epoch(now_local()) - last
    cooldown = get_user_cooldown(user_id)
    if delta >= cooldown:
        return True, None
    else:
        return False, cooldown - delta

# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ====

def main_reply_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üë£ –ù–∞–∂–∞—Ç—å"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ"), KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä"))
    kb.add(KeyboardButton("üìñ –î–Ω–µ–≤–Ω–∏–∫"))
    kb.add(KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    kb.add(KeyboardButton("‚è± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞"))
    return kb


def press_inline_kb(allowed: bool) -> InlineKeyboardMarkup:
    text = "üü¢ üë£ –ù–∞–∂–∞—Ç—å" if allowed else "üî¥ üë£ –†–∞–Ω–æ"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text, callback_data="kick"))
    return kb

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é ====
@dp.message_handler(lambda m: m.text == "‚è± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞")
async def on_set_timer(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=4)
    options = [5,10,15,20]
    for val in options:
        kb.insert(InlineKeyboardButton(f"{val} –º–∏–Ω", callback_data=f"set_timer:{val}"))
    kb.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="set_timer_manual"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞–π–º–µ—Ä–∞:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("set_timer:"))
async def on_set_timer_cb(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        val_min = int(callback_query.data.split(":")[1])
        set_user_cooldown(user_id, val_min*60)
        await callback_query.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {val_min} –º–∏–Ω—É—Ç ‚úÖ", show_alert=True)
    except:
        await callback_query.answer("–û—à–∏–±–∫–∞ ‚ùå", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "set_timer_manual")
async def on_set_timer_manual(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_manual_timer_input.add(user_id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:")
    await callback_query.answer()

@dp.message_handler(lambda m: m.from_user.id in user_manual_timer_input)
async def on_manual_timer_input(message: types.Message):
    user_id = message.from_user.id
    try:
        val_min = int(message.text)
        if val_min <= 0:
            raise ValueError
        set_user_cooldown(user_id, val_min*60)
        await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {val_min} –º–∏–Ω—É—Ç ‚úÖ")
    except:
        await message.answer("–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
    finally:
        user_manual_timer_input.discard(user_id)

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π, –¥–Ω–µ–≤–Ω–∏–∫–∞, —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ====
@dp.message_handler(lambda m: m.text == "üë£ –ù–∞–∂–∞—Ç—å")
async def handle_press(message: types.Message):
    user_id = message.from_user.id
    allowed, wait_sec = is_press_allowed(user_id)
    if allowed:
        insert_movement(user_id)
        await message.answer(f"–î–≤–∏–∂–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ", reply_markup=main_reply_kb())
    else:
        await message.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {int(wait_sec/60)+1} –º–∏–Ω üî¥", reply_markup=main_reply_kb())

@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ")
async def handle_undo(message: types.Message):
    ts = delete_last_movement(message.from_user.id)
    if ts:
        await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ üóëÔ∏è", reply_markup=main_reply_kb())
    else:
        await message.answer(f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=main_reply_kb())

@dp.message_handler(lambda m: m.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä")
async def handle_reset_timer(message: types.Message):
    force_green_flag[message.from_user.id] = True
    await message.answer(f"–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω, –∫–Ω–æ–ø–∫–∞ —Å–Ω–æ–≤–∞ –∑–µ–ª—ë–Ω–∞—è ‚úÖ", reply_markup=main_reply_kb())

@dp.message_handler(lambda m: m.text == "üìñ –î–Ω–µ–≤–Ω–∏–∫")
async def handle_diary(message: types.Message):
    movements = fetch_day_movements(message.from_user.id)
    if not movements:
        await message.answer("–ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è üìÖ", reply_markup=main_reply_kb())
    else:
        text = "–î–Ω–µ–≤–Ω–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join([from_epoch(ts).strftime('%H:%M') for ts in movements])
        await message.answer(text, reply_markup=main_reply_kb())

@dp.message_handler(lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV")
async def handle_export_csv(message: types.Message):
    user_id = message.from_user.id
    movements = fetch_day_movements(user_id)
    if not movements:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", reply_markup=main_reply_kb())
        return
    filename = f"movements_{user_id}_{datetime.now().strftime('%Y%m%d')}.csv"
    with open(filename, "w", newline="", encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["–î–∞—Ç–∞–í—Ä–µ–º—è"])
        for ts in movements:
            writer.writerow([from_epoch(ts).strftime('%Y-%m-%d %H:%M:%S')])
    await message.answer_document(InputFile(filename))

@dp.message_handler(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats(message: types.Message):
    user_id = message.from_user.id
    text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for i in range(6,-1,-1):
        d = (now_local() - timedelta(days=i)).date()
        count = len(fetch_day_movements(user_id, d))
        text += f"{d.strftime('%d.%m')}: {count} –¥–≤–∏–∂–µ–Ω–∏–π\n"
    await message.answer(text, reply_markup=main_reply_kb())

# ==== –ó–∞–ø—É—Å–∫ ====
if __name__ == "__main__":
    init_db()
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    executor.start_polling(dp, skip_updates=True)
